apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    operator.openyurt.io/skip-reconcile: "true"
  name: yurt-operator-manifests-template
  namespace: kube-system
data:
  yurt-cm-sa: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: yurt-controller-manager
      namespace: kube-system
  yurt-cm-cluster-role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      name: yurt-controller-manager
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - ""
      resources:
      - nodes/status
      verbs:
      - patch
      - update
    - apiGroups:
      - ""
      resources:
      - pods/status
      verbs:
      - update
    - apiGroups:
      - ""
      resources:
      - pods
      verbs:
      - delete
      - list
      - watch
    - apiGroups:
      - ""
      - events.k8s.io
      resources:
      - events
      verbs:
      - create
      - patch
      - update
    - apiGroups:
      - coordination.k8s.io
      resources:
      - leases
      verbs:
      - create
      - delete
      - get
      - patch
      - update
      - list
      - watch
    - apiGroups:
      - ""
      - apps
      resources:
      - daemonsets
      verbs:
      - list
      - watch
    - apiGroups:
      - certificates.k8s.io
      resources:
      - certificatesigningrequests
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - certificates.k8s.io
      resources:
      - certificatesigningrequests/approval
      verbs:
      - get
      - list
      - watch
      - update
      - patch
    - apiGroups:
      - certificates.k8s.io
      resources:
      - signers
      resourceNames:
      - "kubernetes.io/legacy-unknown"
      verbs:
      - approve
  yurt-cm-cluster-role-binding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: yurt-controller-manager
    subjects:
      - kind: ServiceAccount
        name: yurt-controller-manager
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: yurt-controller-manager
      apiGroup: rbac.authorization.k8s.io
  yurt-cm-deploy: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: yurt-controller-manager
      namespace: kube-system
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: yurt-controller-manager
      template:
        metadata:
          labels:
            app: yurt-controller-manager
        spec:
          serviceAccountName: yurt-controller-manager
          tolerations:
          - operator: "Exists"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: yurt-controller-manager
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-role.kubernetes.io/master
                        operator: Exists
          containers:
          - name: yurt-controller-manager
            image: {{ .yurtControllerImage }}
            command:
            - yurt-controller-manager
  yurt-tunnel-server-cluster-role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      name: yurt-tunnel-server
    rules:
    - apiGroups:
      - certificates.k8s.io
      resources:
      - certificatesigningrequests
      - certificatesigningrequests/approval
      verbs:
      - create
      - get
      - list
      - watch
      - delete
      - update
      - patch
    - apiGroups:
      - certificates.k8s.io
      resources:
      - signers
      resourceNames:
      - "kubernetes.io/legacy-unknown"
      verbs:
      - approve
    - apiGroups:
      - ""
      resources:
      - endpoints
      verbs:
      - get
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - services
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - list
      - watch
      - get
      - create
      - update
    - apiGroups:
      - "coordination.k8s.io"
      resources:
      - leases
      verbs:
      - create
      - get
      - update
  yurt-tunnel-server-cluster-role-binding: |
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1beta1
    metadata:
      name: yurt-tunnel-server
    subjects:
      - kind: ServiceAccount
        name: yurt-tunnel-server
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: yurt-tunnel-server
      apiGroup: rbac.authorization.k8s.io
  yurt-tunnel-server-sa: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: yurt-tunnel-server
      namespace: kube-system
  yurt-tunnel-server-svc: |
    apiVersion: v1
    kind: Service
    metadata:
      name: x-tunnel-server-svc
      namespace: kube-system
      labels:
        name: yurt-tunnel-server
    spec:
      type: NodePort
      ports:
      - port: 10263
        protocol: TCP
        targetPort: 10263
        name: https
      - port: 10262
        protocol: TCP
        targetPort: 10262
        name: tcp
      selector:
        k8s-app: yurt-tunnel-server
  yurt-tunnel-server-svc-with-public-ip: |
    apiVersion: v1
    kind: Service
    metadata:
      name: x-tunnel-server-svc
      namespace: kube-system
      annotations:
        x-tunnel-server-external-addr: {{ .publicIP }}:{{ .publicPort }}
      labels:
        name: yurt-tunnel-server
    spec:
      type: ClusterIP
      ports:
      - port: 10263
        protocol: TCP
        targetPort: 10263
        name: https
      - port: {{ .publicPort }}
        protocol: TCP
        targetPort: 10262
        name: tcp
      selector:
        k8s-app: yurt-tunnel-server
  yurt-tunnel-server-svc-with-public-ip-nodeport: |
    apiVersion: v1
    kind: Service
    metadata:
      name: x-tunnel-server-svc-nodeport
      namespace: kube-system
      labels:
        name: yurt-tunnel-server
    spec:
      type: NodePort
      ports:
      - port: 10263
        protocol: TCP
        targetPort: 10263
        name: https
      - port: {{ .publicPort }}
        protocol: TCP
        targetPort: 10262
        nodePort: {{ .publicPort }}
        name: tcp
      selector:
        k8s-app: yurt-tunnel-server
  yurt-tunnel-server-internal-svc: |
    apiVersion: v1
    kind: Service
    metadata:
      name: x-tunnel-server-internal-svc
      namespace: kube-system
      annotations:
        operator.openyurt.io/skip-reconcile: "true"
      labels:
        name: yurt-tunnel-server
    spec:
      ports:
        - port: 10250
          protocol: TCP
          targetPort: 10263
          name: https
        - port: 10255
          protocol: TCP
          targetPort: 10264
          name: http
      selector:
        k8s-app: yurt-tunnel-server
  yurt-tunnel-server-cfg: |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: yurt-tunnel-server-cfg
      namespace: kube-system
      annotations:
        operator.openyurt.io/skip-reconcile: "true"
    data:
      dnat-ports-pair: ""
  yurt-tunnel-server-deploy-template: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: yurt-tunnel-server-{{ .nodeName }}
      namespace: kube-system
      labels:
        k8s-app: yurt-tunnel-server
    spec:
      selector:
        matchLabels:
          k8s-app: yurt-tunnel-server
      template:
        metadata:
          labels:
            k8s-app: yurt-tunnel-server
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    k8s-app: yurt-tunnel-server
          hostNetwork: true
          serviceAccountName: yurt-tunnel-server
          restartPolicy: Always
          volumes:
          - name: tunnel-server-dir
            hostPath:
              path: /var/lib/yurttunnel-server
              type: DirectoryOrCreate
          tolerations:
          - operator: "Exists"
          nodeSelector:
            "kubernetes.io/hostname": {{ .nodeName }}
          containers:
          - name: yurt-tunnel-server
            image: {{ .yurtTunnelServerImage }}
            command:
            - yurt-tunnel-server
            args:
            - --bind-address=$(NODE_IP)
            - --server-count={{ .tunnelServerReplicas }}
            - --proxy-strategy=destHost
            - --v=2
            env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            securityContext:
              capabilities:
                add: ["NET_ADMIN", "NET_RAW"]
            volumeMounts:
            - name: tunnel-server-dir
              mountPath: /var/lib/yurttunnel-server
  yurt-tunnel-server-deploy: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: yurt-tunnel-server
      namespace: kube-system
      labels:
        k8s-app: yurt-tunnel-server
    spec:
      replicas: {{ .replicas }}
      selector:
        matchLabels:
          k8s-app: yurt-tunnel-server
      template:
        metadata:
          labels:
            k8s-app: yurt-tunnel-server
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    k8s-app: yurt-tunnel-server
          hostNetwork: true
          serviceAccountName: yurt-tunnel-server
          restartPolicy: Always
          volumes:
          - name: tunnel-server-dir
            hostPath:
              path: /var/lib/yurttunnel-server
              type: DirectoryOrCreate
          tolerations:
          - operator: "Exists"
          nodeSelector:
            {{ .edgeNodeLabel }}: "false"
          containers:
          - name: yurt-tunnel-server
            image: {{ .yurtTunnelServerImage }}
            command:
            - yurt-tunnel-server
            args:
            - --bind-address=$(NODE_IP)
            - --server-count={{ .tunnelServerReplicas }}
            - --proxy-strategy=destHost
            - --v=2
            env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            securityContext:
              capabilities:
                add: ["NET_ADMIN", "NET_RAW"]
            volumeMounts:
            - name: tunnel-server-dir
              mountPath: /var/lib/yurttunnel-server
  yurt-tunnel-agent-ds: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: yurt-tunnel-agent
      name: yurt-tunnel-agent
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: yurt-tunnel-agent
      template:
        metadata:
          labels:
            k8s-app: yurt-tunnel-agent
        spec:
          nodeSelector:
            {{ .edgeNodeLabel }}: "true"
          containers:
          - command:
            - yurt-tunnel-agent
            args:
            - --node-name=$(NODE_NAME)
            - --node-ip=$(POD_IP)
            - --v=2
            image: {{ .yurtTunnelAgentImage }}
            name: yurt-tunnel-agent
            volumeMounts:
            - name: k8s-dir
              mountPath: /etc/kubernetes
            - name: kubelet-pki
              mountPath: /var/lib/kubelet/pki
            - name: tunnel-agent-dir
              mountPath: /var/lib/yurttunnel-agent
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          hostNetwork: true
          restartPolicy: Always
          tolerations:
            - operator: Exists
          volumes:
          - name: k8s-dir
            hostPath:
              path: /etc/kubernetes
              type: Directory
          - name: kubelet-pki
            hostPath:
              path: /var/lib/kubelet/pki
              type: Directory
          - name: tunnel-agent-dir
            hostPath:
              path: /var/lib/yurttunnel-agent
              type: DirectoryOrCreate
  yurt-hub-pod: |
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        k8s-app: yurt-hub
      name: yurt-hub
      namespace: kube-system
    spec:
      volumes:
      - name: pki
        hostPath:
          path: {{ .kubePkiDir }}
          type: Directory
      - name: kubernetes
        hostPath:
          path: /etc/kubernetes
          type: Directory
      - name: pem-dir
        hostPath:
          path: /var/lib/kubelet/pki
          type: Directory
      containers:
      - name: yurt-hub
        image: {{ .yurtHubImage }}
        volumeMounts:
        - name: kubernetes
          mountPath: /etc/kubernetes
        - name: pki
          mountPath: /etc/kubernetes/pki
        - name: pem-dir
          mountPath: /var/lib/kubelet/pki
        command:
        - yurthub
        - --v=2
        - --server-addr={{ .apiServerAddress }}
        - --enable-resource-filter={{ .enableResourceFilter }}
        - --access-server-through-hub={{ .accessServerThroughHub }}
        - --node-name=$(NODE_NAME)
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /v1/healthz
            port: 10267
          initialDelaySeconds: 300
          periodSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            cpu: 150m
            memory: 150Mi
          limits:
            memory: 300Mi
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      hostNetwork: true
      priorityClassName: system-node-critical
      priority: 2000001000
  yurt-kubelet-config: |
    apiVersion: v1
    clusters:
    - cluster:
        server: http://127.0.0.1:10261
      name: default-cluster
    contexts:
    - context:
        cluster: default-cluster
        namespace: default
        user: default-auth
      name: default-context
    current-context: default-context
    kind: Config
    preferences: {}
  yurt-node-sa: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: yurt-node
      namespace: kube-system
  yurt-node-cluster-role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      name: yurt-node
    rules:
      - apiGroups:
        - ""
        resources:
        - nodes
        - configmaps
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - operator.openyurt.io
        resources:
        - yurtclusters
        verbs:
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - operator.openyurt.io
        resources:
        - yurtclusters/status
        verbs:
        - get
        - patch
        - update
  yurt-node-cluster-role-binding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: yurt-node
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: yurt-node
    subjects:
      - kind: ServiceAccount
        name: yurt-node
        namespace: kube-system
  yurt-node-convert-pod: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: yurt-convert-{{ .nodeName }}
      namespace: kube-system
      labels:
        app: yurt-node-convert
    spec:
      nodeName: {{ .nodeName }}
      tolerations:
      - operator: "Exists"
      serviceAccountName: yurt-node
      hostPID: true
      hostNetwork: true # avoid interference from CNI
      restartPolicy: Never
      volumes:
      - name: host-var-tmp
        hostPath:
          path: /var/tmp
          type: Directory
      containers:
      - name: yurt-node-convert
        image: {{ .yurtNodeImage }}
        imagePullPolicy: {{ .yurtNodeImagePullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          cp -a /var/run/secrets/kubernetes.io/serviceaccount /tmp/serviceaccount
          nsenter -t 1 -m -u -n -i sh <<EOF
          if [ ! -d /var/run/secrets/kubernetes.io ]; then
            mkdir -p /var/run/secrets/kubernetes.io
          fi
          cp -a /var/tmp/serviceaccount /var/run/secrets/kubernetes.io/
          /var/tmp/edgectl convert --node-name $NODE_NAME --health-check-timeout {{ .healthCheckTimeout }}
          rm -rf /var/run/secrets/kubernetes.io/serviceaccount
          exit
          EOF
          rm -rf /tmp/serviceaccount
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /tmp
          name: host-var-tmp
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
  yurt-node-revert-pod: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: yurt-revert-{{ .nodeName }}
      namespace: kube-system
      labels:
        app: yurt-node-revert
    spec:
      nodeName: {{ .nodeName }}
      tolerations:
      - operator: "Exists"
      serviceAccountName: yurt-node
      hostPID: true
      hostNetwork: true # avoid interference from CNI
      restartPolicy: OnFailure
      volumes:
      - name: host-var-tmp
        hostPath:
          path: /var/tmp
          type: Directory
      containers:
      - name: yurt-node-revert
        image: {{ .yurtNodeImage }}
        imagePullPolicy: {{ .yurtNodeImagePullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          cp -a /var/run/secrets/kubernetes.io/serviceaccount /tmp/serviceaccount
          nsenter -t 1 -m -u -n -i sh <<EOF
          if [ ! -d /var/run/secrets/kubernetes.io ]; then
            mkdir -p /var/run/secrets/kubernetes.io
          fi
          cp -a /var/tmp/serviceaccount /var/run/secrets/kubernetes.io/
          /var/tmp/edgectl revert --node-name $NODE_NAME --health-check-timeout {{ .healthCheckTimeout }}
          rm -rf /var/run/secrets/kubernetes.io/serviceaccount
          exit
          EOF
          rm -rf /tmp/serviceaccount
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /tmp
          name: host-var-tmp
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
  yurt-node-agent-sa: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: yurt-node-agent
      namespace: kube-system
  yurt-node-agent-cluster-role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      name: yurt-node-agent
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      - configmaps
      - services
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      - apps
      resources:
      - daemonsets
      - deployments
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - pods
      - serviceaccounts
      verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    - apiGroups:
      - rbac.authorization.k8s.io
      resources:
      - clusterroles
      - clusterrolebindings
      verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    - apiGroups:
      - operator.openyurt.io
      resources:
      - yurtclusters
      verbs:
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - operator.openyurt.io
      resources:
      - yurtclusters/status
      verbs:
      - get
      - patch
      - update
  yurt-node-agent-cluster-role-binding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: yurt-node-agent
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: yurt-node-agent
    subjects:
      - kind: ServiceAccount
        name: yurt-node-agent
        namespace: kube-system
  yurt-node-agent-ds: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: yurt-node-agent
      name: yurt-node-agent
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: yurt-node-agent
      template:
        metadata:
          labels:
            k8s-app: yurt-node-agent
        spec:
          volumes:
          - name: host-var-tmp
            hostPath:
              path: /var/tmp
              type: Directory
          - name: kubernetes
            hostPath:
              path: /etc/kubernetes
              type: Directory
          initContainers:
          - command:
            - sh
            - -c
            - |
              cp /assets/* /tmp/
            image: {{ .yurtNodeAgentImage }}
            imagePullPolicy: {{ .yurtNodeAgentImagePullPolicy }}
            name: yurt-node-prepare
            volumeMounts:
            - mountPath: /tmp
              name: host-var-tmp
          containers:
          - command:
            - /agent
            args:
            - --node-name=$(NODE_NAME)
            - --yurt-node-image={{ .yurtNodeImage }}
            - --yurt-node-image-pull-policy={{ .yurtNodeImagePullPolicy }}
            - --yurt-task-health-check-timeout={{ .yurtTaskHealthCheckTimeout }}
            image: {{ .yurtNodeAgentImage }}
            imagePullPolicy: {{ .yurtNodeAgentImagePullPolicy }}
            name: yurt-node-agent
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /tmp
              name: host-var-tmp
            - mountPath: /etc/kubernetes
              name: kubernetes
          hostNetwork: true # avoid interference from CNI
          hostPID: true
          serviceAccountName: yurt-node-agent
          restartPolicy: Always
          tolerations:
            - operator: Exists
  yurt-app-manager-nodepools-crd: |
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.2.9
      creationTimestamp: null
      name: nodepools.apps.openyurt.io
    spec:
      additionalPrinterColumns:
      - JSONPath: .spec.type
        description: The type of nodepool
        name: Type
        type: string
      - JSONPath: .status.readyNodeNum
        description: The number of ready nodes in the pool
        name: ReadyNodes
        type: integer
      - JSONPath: .status.unreadyNodeNum
        name: NotReadyNodes
        type: integer
      - JSONPath: .metadata.creationTimestamp
        name: Age
        type: date
      group: apps.openyurt.io
      names:
        categories:
        - all
        kind: NodePool
        listKind: NodePoolList
        plural: nodepools
        shortNames:
        - np
        singular: nodepool
      scope: Cluster
      subresources:
        status: {}
      validation:
        openAPIV3Schema:
          description: NodePool is the Schema for the nodepools API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: NodePoolSpec defines the desired state of NodePool
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  description: 'If specified, the Annotations will be added to all nodes.
                    NOTE: existing labels with samy keys on the nodes will be overwritten.'
                  type: object
                labels:
                  additionalProperties:
                    type: string
                  description: 'If specified, the Labels will be added to all nodes. NOTE:
                    existing labels with samy keys on the nodes will be overwritten.'
                  type: object
                selector:
                  description: A label query over nodes to consider for adding to the
                    pool
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that contains
                          values, a key, and an operator that relates the key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship to a
                              set of values. Valid operators are In, NotIn, Exists and
                              DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the operator
                              is In or NotIn, the values array must be non-empty. If the
                              operator is Exists or DoesNotExist, the values array must
                              be empty. This array is replaced during a strategic merge
                              patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator is
                        "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                taints:
                  description: If specified, the Taints will be added to all nodes.
                  items:
                    description: The node this Taint is attached to has the "effect" on
                      any pod that does not tolerate the Taint.
                    type: object
                  type: array
                type:
                  description: The type of the NodePool
                  type: string
              type: object
            status:
              description: NodePoolStatus defines the observed state of NodePool
              properties:
                nodes:
                  description: The list of nodes' names in the pool
                  items:
                    type: string
                  type: array
                readyNodeNum:
                  description: Total number of ready nodes in the pool.
                  format: int32
                  type: integer
                unreadyNodeNum:
                  description: Total number of unready nodes in the pool.
                  format: int32
                  type: integer
              type: object
          type: object
      version: v1alpha1
      versions:
      - name: v1alpha1
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
  yurt-app-manager-uniteddeployments-crd: |
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.2.9
      creationTimestamp: null
      name: uniteddeployments.apps.openyurt.io
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.readyReplicas
        description: The number of pods ready.
        name: READY
        type: integer
      - JSONPath: .status.templateType
        description: The WorkloadTemplate Type.
        name: WorkloadTemplate
        type: string
      - JSONPath: .metadata.creationTimestamp
        description: CreationTimestamp is a timestamp representing the server time when
          this object was created. It is not guaranteed to be set in happens-before order
          across separate operations. Clients may not set this value. It is represented
          in RFC3339 form and is in UTC.
        name: AGE
        type: date
      group: apps.openyurt.io
      names:
        kind: UnitedDeployment
        listKind: UnitedDeploymentList
        plural: uniteddeployments
        shortNames:
        - ud
        singular: uniteddeployment
      scope: Namespaced
      subresources:
        status: {}
      validation:
        openAPIV3Schema:
          description: UnitedDeployment is the Schema for the uniteddeployments API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: UnitedDeploymentSpec defines the desired state of UnitedDeployment.
              properties:
                revisionHistoryLimit:
                  description: Indicates the number of histories to be conserved. If unspecified,
                    defaults to 10.
                  format: int32
                  type: integer
                selector:
                  description: Selector is a label query over pods that should match the
                    replica count. It must match the pod template's labels.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that contains
                          values, a key, and an operator that relates the key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship to a
                              set of values. Valid operators are In, NotIn, Exists and
                              DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the operator
                              is In or NotIn, the values array must be non-empty. If the
                              operator is Exists or DoesNotExist, the values array must
                              be empty. This array is replaced during a strategic merge
                              patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator is
                        "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                topology:
                  description: Topology describes the pods distribution detail between
                    each of pools.
                  properties:
                    pools:
                      description: Contains the details of each pool. Each element in
                        this array represents one pool which will be provisioned and managed
                        by UnitedDeployment.
                      items:
                        description: Pool defines the detail of a pool.
                        properties:
                          name:
                            description: Indicates pool name as a DNS_LABEL, which will
                              be used to generate pool workload name prefix in the format
                              '<deployment-name>-<pool-name>-'. Name should be unique
                              between all of the pools under one UnitedDeployment. Name
                              is NodePool Name
                            type: string
                          nodeSelectorTerm:
                            description: Indicates the node selector to form the pool.
                              Depending on the node selector, pods provisioned could be
                              distributed across multiple groups of nodes. A pool's nodeSelectorTerm
                              is not allowed to be updated.
                            type: object
                          patch:
                            description: Indicates the patch for the templateSpec Now
                              support strategic merge path :https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#notes-on-the-strategic-merge-patch
                              Patch takes precedence over Replicas fields If the Patch
                              also modifies the Replicas, use the Replicas value in the
                              Patch
                            type: object
                          replicas:
                            description: Indicates the number of the pod to be created
                              under this pool.
                            format: int32
                            type: integer
                          tolerations:
                            description: Indicates the tolerations the pods under this
                              pool have. A pool's tolerations is not allowed to be updated.
                            items:
                              description: The pod this Toleration is attached to tolerates
                                any taint that matches the triple <key,value,effect> using
                                the matching operator <operator>.
                              type: object
                            type: array
                        required:
                        - name
                        type: object
                      type: array
                  type: object
                workloadTemplate:
                  description: WorkloadTemplate describes the pool that will be created.
                  properties:
                    deploymentTemplate:
                      description: Deployment template
                      properties:
                        metadata:
                          type: object
                        spec:
                          description: DeploymentSpec is the specification of the desired
                            behavior of the Deployment.
                          type: object
                      required:
                      - spec
                      type: object
                    statefulSetTemplate:
                      description: StatefulSet template
                      properties:
                        metadata:
                          type: object
                        spec:
                          description: A StatefulSetSpec is the specification of a StatefulSet.
                          type: object
                      required:
                      - spec
                      type: object
                  type: object
              required:
              - selector
              type: object
            status:
              description: UnitedDeploymentStatus defines the observed state of UnitedDeployment.
              properties:
                collisionCount:
                  description: Count of hash collisions for the UnitedDeployment. The
                    UnitedDeployment controller uses this field as a collision avoidance
                    mechanism when it needs to create the name for the newest ControllerRevision.
                  format: int32
                  type: integer
                conditions:
                  description: Represents the latest available observations of a UnitedDeployment's
                    current state.
                  items:
                    description: UnitedDeploymentCondition describes current state of
                      a UnitedDeployment.
                    properties:
                      lastTransitionTime:
                        description: Last time the condition transitioned from one status
                          to another.
                        format: date-time
                        type: string
                      message:
                        description: A human readable message indicating details about
                          the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of in place set condition.
                        type: string
                    type: object
                  type: array
                currentRevision:
                  description: CurrentRevision, if not empty, indicates the current version
                    of the UnitedDeployment.
                  type: string
                observedGeneration:
                  description: ObservedGeneration is the most recent generation observed
                    for this UnitedDeployment. It corresponds to the UnitedDeployment's
                    generation, which is updated on mutation by the API Server.
                  format: int64
                  type: integer
                poolReplicas:
                  additionalProperties:
                    format: int32
                    type: integer
                  description: Records the topology detail information of the replicas
                    of each pool.
                  type: object
                readyReplicas:
                  description: The number of ready replicas.
                  format: int32
                  type: integer
                replicas:
                  description: Replicas is the most recently observed number of replicas.
                  format: int32
                  type: integer
                templateType:
                  description: TemplateType indicates the type of PoolTemplate
                  type: string
              required:
              - currentRevision
              - replicas
              - templateType
              type: object
          type: object
      version: v1alpha1
      versions:
      - name: v1alpha1
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
  yurt-app-manager-election-role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: yurt-app-leader-election-role
      namespace: kube-system
    rules:
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    - apiGroups:
      - ""
      resources:
      - configmaps/status
      verbs:
      - get
      - update
      - patch
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - create
  yurt-app-manager-cluster-role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: yurt-app-manager-role
    rules:
    - apiGroups:
      - admissionregistration.k8s.io
      resources:
      - mutatingwebhookconfigurations
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - admissionregistration.k8s.io
      resources:
      - validatingwebhookconfigurations
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - apps
      resources:
      - controllerrevisions
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - apps
      resources:
      - deployments/status
      verbs:
      - get
      - patch
      - update
    - apiGroups:
      - apps
      resources:
      - statefulsets
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - apps
      resources:
      - statefulsets/status
      verbs:
      - get
      - patch
      - update
    - apiGroups:
      - apps.openyurt.io
      resources:
      - nodepools
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - apps.openyurt.io
      resources:
      - nodepools/status
      verbs:
      - get
      - patch
      - update
    - apiGroups:
      - apps.openyurt.io
      resources:
      - uniteddeployments
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - apps.openyurt.io
      resources:
      - uniteddeployments/status
      verbs:
      - get
      - patch
      - update
    - apiGroups:
      - coordination.k8s.io
      resources:
      - leases
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - ""
      resources:
      - persistentvolumeclaims
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - ""
      resources:
      - pods
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  yurt-app-manager-sa: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: yurt-app-manager
      namespace: kube-system
  yurt-app-manager-role-binding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: yurt-app-leader-election-rolebinding
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: yurt-app-leader-election-role
    subjects:
    - kind: ServiceAccount
      name: yurt-app-manager
      namespace: kube-system
  yurt-app-manager-cluster-role-binding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: yurt-app-manager-rolebinding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: yurt-app-manager-role
    subjects:
    - kind: ServiceAccount
      name: yurt-app-manager
      namespace: kube-system
  yurt-app-manager-secret: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: yurt-app-webhook-certs
      namespace: kube-system
  yurt-app-manager-service: |
    apiVersion: v1
    kind: Service
    metadata:
      name: yurt-app-webhook-service
      namespace: kube-system
    spec:
      ports:
      - name: webhook-server
        port: 443
        protocol: TCP
        targetPort: 9876
      selector:
        control-plane: yurt-app-manager
  yurt-app-manager-deployment: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        control-plane: yurt-app-manager
      name: yurt-app-manager
      namespace: kube-system
    spec:
      replicas: 1
      selector:
        matchLabels:
          control-plane: yurt-app-manager
      template:
        metadata:
          labels:
            control-plane: yurt-app-manager
        spec:
          serviceAccountName: yurt-app-manager
          containers:
          - args:
            - --enable-leader-election
            - --v=4
            command:
            - /usr/local/bin/yurt-app-manager
            image: {{ .yurtAppManagerImage }}
            name: manager
            ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
            volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
          priorityClassName: system-node-critical
          terminationGracePeriodSeconds: 10
          tolerations:
          - operator: Exists
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    control-plane: yurt-app-manager
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-role.kubernetes.io/master
                        operator: Exists
          volumes:
          - name: cert
            secret:
              defaultMode: 420
              secretName: yurt-app-webhook-certs
  yurt-app-manager-mwc: |
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: MutatingWebhookConfiguration
    metadata:
      creationTimestamp: null
      name: yurt-app-mutating-webhook-configuration
    webhooks:
    - clientConfig:
        caBundle: Cg==
        service:
          name: yurt-app-webhook-service
          namespace: kube-system
          path: /mutate-apps-openyurt-io-v1alpha1-nodepool
      failurePolicy: Fail
      name: mnodepool.kb.io
      rules:
      - apiGroups:
        - apps.openyurt.io
        apiVersions:
        - v1alpha1
        operations:
        - CREATE
        - UPDATE
        resources:
        - nodepools
    - clientConfig:
        caBundle: Cg==
        service:
          name: yurt-app-webhook-service
          namespace: kube-system
          path: /mutate-apps-openyurt-io-v1alpha1-uniteddeployment
      failurePolicy: Fail
      name: muniteddeployment.kb.io
      rules:
      - apiGroups:
        - apps.openyurt.io
        apiVersions:
        - v1alpha1
        operations:
        - CREATE
        - UPDATE
        resources:
        - uniteddeployments
  yurt-app-manager-vmc: |
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: ValidatingWebhookConfiguration
    metadata:
      creationTimestamp: null
      name: yurt-app-validating-webhook-configuration
    webhooks:
    - clientConfig:
        caBundle: Cg==
        service:
          name: yurt-app-webhook-service
          namespace: kube-system
          path: /validate-apps-openyurt-io-v1alpha1-nodepool
      failurePolicy: Fail
      name: vnodepool.kb.io
      rules:
      - apiGroups:
        - apps.openyurt.io
        apiVersions:
        - v1alpha1
        operations:
        - CREATE
        - UPDATE
        - DELETE
        resources:
        - nodepools
    - clientConfig:
        caBundle: Cg==
        service:
          name: yurt-app-webhook-service
          namespace: kube-system
          path: /validate-apps-openyurt-io-v1alpha1-uniteddeployment
      failurePolicy: Fail
      name: vuniteddeployment.kb.io
      rules:
      - apiGroups:
        - apps.openyurt.io
        apiVersions:
        - v1alpha1
        operations:
        - CREATE
        - UPDATE
        resources:
        - uniteddeployments
  node-local-dns-cache-sa: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: node-local-dns
      namespace: kube-system
      labels:
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
  node-local-dns-cache-upstream-service: |
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns-upstream
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
        kubernetes.io/name: "KubeDNSUpstream"
    spec:
      ports:
      - name: dns
        port: 53
        protocol: UDP
        targetPort: 53
      - name: dns-tcp
        port: 53
        protocol: TCP
        targetPort: 53
      selector:
        k8s-app: kube-dns
  node-local-dns-cache-config: |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: node-local-dns
      namespace: kube-system
      labels:
        addonmanager.kubernetes.io/mode: Reconcile
    data:
      Corefile: |
        {{ .clusterDomain }}:53 {
            errors
            cache {
                    success 9984 30
                    denial 9984 5
            }
            reload
            loop
            bind {{ .nodeLocalAddress }} {{ .kubeDNSClusterIP }}
            forward . __PILLAR__CLUSTER__DNS__ {
                    force_tcp
            }
            prometheus :9253
            health {{ .nodeLocalAddress }}:8080
            }
        in-addr.arpa:53 {
            errors
            cache 30
            reload
            loop
            bind {{ .nodeLocalAddress }} {{ .kubeDNSClusterIP }}
            forward . __PILLAR__CLUSTER__DNS__ {
                    force_tcp
            }
            prometheus :9253
            }
        ip6.arpa:53 {
            errors
            cache 30
            reload
            loop
            bind {{ .nodeLocalAddress }} {{ .kubeDNSClusterIP }}
            forward . __PILLAR__CLUSTER__DNS__ {
                    force_tcp
            }
            prometheus :9253
            }
        .:53 {
            errors
            cache 30
            reload
            loop
            bind {{ .nodeLocalAddress }} {{ .kubeDNSClusterIP }}
            forward . __PILLAR__UPSTREAM__SERVERS__
            prometheus :9253
            }
  node-local-dns-cache-ds: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: node-local-dns
      namespace: kube-system
      labels:
        k8s-app: node-local-dns
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
    spec:
      updateStrategy:
        rollingUpdate:
          maxUnavailable: 10%
      selector:
        matchLabels:
          k8s-app: node-local-dns
      template:
        metadata:
          labels:
            k8s-app: node-local-dns
          annotations:
            prometheus.io/port: "9253"
            prometheus.io/scrape: "true"
        spec:
          priorityClassName: system-node-critical
          serviceAccountName: node-local-dns
          hostNetwork: true
          dnsPolicy: Default  # Don't use cluster DNS.
          tolerations:
          - key: "CriticalAddonsOnly"
            operator: "Exists"
          - effect: "NoExecute"
            operator: "Exists"
          - effect: "NoSchedule"
            operator: "Exists"
          containers:
          - name: node-cache
            image: {{ .nodeLocalDNSImage }}
            resources:
              requests:
                cpu: 25m
                memory: 5Mi
            args: [ "-localip", "{{ .nodeLocalAddress }},{{ .kubeDNSClusterIP }}", "-conf", "/etc/Corefile", "-upstreamsvc", "kube-dns-upstream" ]
            securityContext:
              privileged: true
            ports:
            - containerPort: 53
              name: dns
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
            - containerPort: 9253
              name: metrics
              protocol: TCP
            livenessProbe:
              httpGet:
                host: {{ .nodeLocalAddress }}
                path: /health
                port: 8080
              initialDelaySeconds: 60
              timeoutSeconds: 5
            volumeMounts:
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - name: config-volume
              mountPath: /etc/coredns
            - name: kube-dns-config
              mountPath: /etc/kube-dns
          volumes:
          - name: xtables-lock
            hostPath:
              path: /run/xtables.lock
              type: FileOrCreate
          - name: kube-dns-config
            configMap:
              name: kube-dns
              optional: true
          - name: config-volume
            configMap:
              name: node-local-dns
              items:
                - key: Corefile
                  path: Corefile.base
  node-local-dns-cache-service: |
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        prometheus.io/port: "9253"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: node-local-dns
      name: node-local-dns
      namespace: kube-system
    spec:
      clusterIP: None
      ports:
        - name: metrics
          port: 9253
          protocol: TCP
          targetPort: 9253
      selector:
        k8s-app: node-local-dns
